(import "env" "log" (func $log (param i32)))
(import "env" "refresh_screen" (func $refresh_screen))
(memory $wasmem (export "wasmem") 18)
(func $add (export "add") (param $x i32) (param $y i32) (result i32)
(i32.add (local.get $x) (local.get $y))
)
;; made a formula to check if math precedence was handled
(func $formula (param $x i32) (param $y i32) (param $z i32) (result i32)
(i32.sub (i32.add (local.get $x) (i32.mul (local.get $y) (local.get $z))) (i32.div_u (i32.const 4) (i32.const 2)))
)
(func $setpixel (param $x i32) (param $y i32) (param $r i32) (param $g i32) (param $b i32) (param $a i32) (local $pxl_start i32)
(local.set $pxl_start
(i32.mul (i32.add (i32.mul (local.get $y) (i32.const 680)) (local.get $x)) (i32.const 4))
)
(local.get $pxl_start)
(local.get $r)
(i32.store8)
(i32.add (local.get $pxl_start) (i32.const 1))
(local.get $g)
(i32.store8)
(i32.add (local.get $pxl_start) (i32.const 2))
(local.get $b)
(i32.store8)
(i32.add (local.get $pxl_start) (i32.const 3))
(local.get $a)
(i32.store8)
)
(func $print_char_scanline (param $bitmap i32) (param $cursor_x i32) (param $pixel_row i32)
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 128)) (i32.const 0))
(if (then
(call $setpixel (local.get $cursor_x) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (local.get $cursor_x) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 64)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 1)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 1)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 32)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 2)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 2)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 16)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 3)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 3)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 8)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 4)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 4)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 4)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 5)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 5)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 2)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 6)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 6)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
(i32.gt_u (i32.and (local.get $bitmap) (i32.const 1)) (i32.const 0))
(if (then
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 7)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 255)))
(else
(call $setpixel (i32.add (local.get $cursor_x) (i32.const 7)) (local.get $pixel_row) (i32.const 0) (i32.const 0) (i32.const 0) (i32.const 0))
))
)
(func $char_cli (param $char i32) (param $column i32) (param $row i32) (local $char_start i32) (local $scanline i32) (local $screen_end i32) (local $char_line i32)
;; writes a character to the screen on cursor column / cursor row
;; found the A character.
(local.set $screen_end
(i32.mul (i32.mul (i32.const 680) (i32.const 420)) (i32.const 4))
)
;; the end of the screen in memory
(local.set $char_start
(i32.add (local.get $screen_end) (i32.mul (i32.sub (local.get $char) (i32.const 32)) (i32.const 11)))
)
(local.set $scanline
(i32.const 0)
)
(block $break_char_cli_0
(loop $top_char_cli_0
(br_if $break_char_cli_0 (i32.eq (local.get $scanline) (i32.const 11)))
(local.set $char_line
(i32.add (local.get $char_start) (local.get $scanline))
)
(call $print_char_scanline (local.get $char_line)
(i32.load8_u) (i32.mul (local.get $column) (i32.const 8)) (i32.add (local.get $row) (local.get $scanline)))
(local.set $scanline
(i32.add (local.get $scanline) (i32.const 1))
)
(br $top_char_cli_0)
)
)
)
(func $load_font (local $char_start i32) (local $screen_end i32)
;; store the bitmap of the font
;; 'A' CHARACTER 65 ascii code
(local.set $screen_end
(i32.mul (i32.mul (i32.const 680) (i32.const 420)) (i32.const 4))
)
(local.set $char_start
(i32.add (local.get $screen_end) (i32.mul (i32.sub (i32.const 65) (i32.const 32)) (i32.const 11)))
)
(call $log (i32.const 437))
(call $log (local.get $char_start))
(local.get $char_start)
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; END of 'A' Character
;; Start of 'B' Character 66 ascii code
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'B' Character
;; Start of 'C' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 60)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 224)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 224)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 60)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'C' Character
;; Start of 'D' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'D' Character'
;; Start of 'E' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 240)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'E' Character
;; Start of 'F' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 240)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'F' Character
;; Start of 'G' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 216)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'G' Character
;; Start of 'H' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'H' Character
;; Start of 'I' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'I' Character
;; Start of 'J' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 240)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 224)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'J' Character
;; Start of 'K' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 216)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 240)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 216)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'K' Character
;; Start of 'L' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'L' Character
;; Start of 'M' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 238)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 214)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'M' Character
;; Start of 'N' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 230)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 230)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 246)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 222)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 206)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 206)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'N' Character
;; Start of 'O' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'O' Character
;; Start of 'P' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'P' Character
;; Start of 'Q' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 14)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'Q' Character
;; Start of 'R' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 220)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 206)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'R' Character
;; Start of 'S' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 12)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 12)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 248)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'S' Character
;; Start of 'T' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'T' Character
;; Start of 'U' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'U' Character
;; Start of 'V' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 68)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 108)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 108)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 56)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 56)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 16)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'V' Character
;; Start of 'W' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 130)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 130)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 130)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 198)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 214)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 108)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 68)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'W' Character
;; Start of 'X' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 132)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 72)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 132)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'X' Character
;; Start of 'Y' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 204)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 120)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'Y' Character
;; Start of 'Z' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 12)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 24)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 48)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 96)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 192)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 252)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of 'Z' Character
;; Start of '0' Character
(local.set $char_start
(i32.add (local.get $char_start) (i32.const 11))
)
(local.get $char_start)
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 1))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 2))
(i32.const 206)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 3))
(i32.const 222)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 4))
(i32.const 214)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 5))
(i32.const 246)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 6))
(i32.const 230)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 7))
(i32.const 254)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 8))
(i32.const 124)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 9))
(i32.const 0)
(i32.store8)
(i32.add (local.get $char_start) (i32.const 10))
(i32.const 0)
(i32.store8)
;; End of '0' Character
)
(func $font_program (local $ch_line i32) (local $ch_index i32)
(call $load_font)
(local.set $ch_line
(i32.const 0)
)
(block $break_font_program_0
(loop $top_font_program_0
(br_if $break_font_program_0 (i32.eq (local.get $ch_line) (i32.const 38)))
(local.set $ch_index
(i32.const 0)
)
(block $break_font_program_1
(loop $top_font_program_1
(br_if $break_font_program_1 (i32.eq (local.get $ch_index) (i32.const 85)))
;; log((ch_index + 65) % 10);
(call $char_cli (i32.add (i32.rem_u (i32.add (local.get $ch_line) (local.get $ch_index)) (i32.const 27)) (i32.const 65)) (local.get $ch_index) (i32.mul (local.get $ch_line) (i32.const 11)))
(local.set $ch_index
(i32.add (local.get $ch_index) (i32.const 1))
)
(br $top_font_program_1)
)
)
(local.set $ch_line
(i32.add (local.get $ch_line) (i32.const 1))
)
(br $top_font_program_0)
)
)
)
(func $condition_check (local $test i32)
(local.set $test
(i32.const 1)
)
(i32.eq (local.get $test) (i32.const 1))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.ne (local.get $test) (i32.const 0))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.ne (local.get $test) (i32.const 1))
(if (then
(call $log (i32.const 6666)))
(else
(call $log (i32.const 1111))
))
(i32.lt_u (local.get $test) (i32.const 2))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.lt_u (i32.const 2) (local.get $test))
(if (then
(call $log (i32.const 6666)))
(else
(call $log (i32.const 1111))
))
(i32.gt_u (i32.const 2) (local.get $test))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.gt_u (local.get $test) (i32.const 2))
(if (then
(call $log (i32.const 6666)))
(else
(call $log (i32.const 1111))
))
(i32.le_u (local.get $test) (i32.const 2))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.le_u (i32.const 2) (local.get $test))
(if (then
(call $log (i32.const 6666)))
(else
(call $log (i32.const 1111))
))
(i32.ge_u (i32.const 2) (local.get $test))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.ge_u (local.get $test) (i32.const 2))
(if (then
(call $log (i32.const 6666)))
(else
(call $log (i32.const 1111))
))
(i32.and (local.get $test) (i32.const 1))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
(i32.and (i32.const 1) (local.get $test))
(if (then
(call $log (i32.const 1111)))
(else
(call $log (i32.const 6666))
))
)
(func $main (export "main") (result i32) (local $xi i32) (local $yi i32)
(call $add (i32.const 410) (i32.const 10))
(call $log)
;; logs the result of the add function that was put on the stack of the main function.
(local.set $yi
(i32.const 0)
)
(block $break_main_0
(loop $top_main_0
(br_if $break_main_0 (i32.eq (local.get $yi) (i32.const 420)))
(local.set $xi
(i32.const 0)
)
(block $break_main_1
(loop $top_main_1
(br_if $break_main_1 (i32.eq (local.get $xi) (i32.const 680)))
;; red is alert on changes in the code
;; log(xi);
;; log(yi);
;; setpixel(xi, yi, 255, 0, 0, 255);
;; setpixel(xi, yi, 165, 55, 253, 255); # purple pixels
(local.set $xi
(i32.add (local.get $xi) (i32.const 1))
)
(br $top_main_1)
)
)
(local.set $yi
(i32.add (local.get $yi) (i32.const 1))
)
(br $top_main_0)
)
)
(call $condition_check)
(call $font_program)
(call $refresh_screen)
;; set the return value 0 from the function
(i32.const 0)
)